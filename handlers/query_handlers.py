from aiogram import Dispatcher
from cringe import bot, types, User, TestStates
from cringe import sql, asyncio, threading, login_qr
from cringe import users_login, stop_markup, time_end
from cringe import users_data, PAYMENTS_TOKEN, PRICE


def register_query_handlers(dp: Dispatcher):
    @dp.callback_query_handler(lambda c: c.data == 'stop', state=TestStates.all())
    async def process_callback_stop(callback_query: types.CallbackQuery):
        state = dp.current_state(user=callback_query.from_user.id)
        await state.reset_state()
        users_data[callback_query.from_user.id].links = []
        users_data[callback_query.from_user.id].fck = -1
        await bot.send_message(callback_query.from_user.id, '–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ—Ä–≤–∞–Ω')

    @dp.callback_query_handler(lambda c: c.data == 'solve_b')
    async def process_callback_solve(callback_query: types.CallbackQuery):
        await callback_query.message.delete()
        users_data[callback_query.from_user.id] = User()
        state = dp.current_state(user=callback_query.from_user.id)
        await bot.send_message(callback_query.from_user.id, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–π –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ QR –∫–æ–¥')
        await login_qr(callback_query.from_user.id)
        sending = await bot.send_photo(callback_query.from_user.id, photo=users_data[callback_query.from_user.id].qr_code)
        sending_id = sending.message_id
        driver = users_data[callback_query.from_user.id].driver
        qr_url = driver.current_url
        while driver.current_url == qr_url:
            if '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑' in driver.page_source:
                await state.reset_state()
                await bot.send_message(callback_query.from_user.id, '–î–∞–≤–∞–π –ø–æ –Ω–æ–≤–æ–π')
                return
            await asyncio.sleep(1)
        await users_login(callback_query.from_user.id)
        sqlite_connection = sql.sql_connection()
        if not sql.check_existence(sqlite_connection, users_data[callback_query.from_user.id].login.lower()):
            await bot.delete_message(callback_query.from_user.id, sending_id)
            await bot.send_message(callback_query.from_user.id, '‚ùå')
            state = dp.current_state(user=callback_query.from_user.id)
            await state.reset_state()
            await bot.send_message(callback_query.from_user.id, '–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏((( —Å–æ—Ä–∏')
        else:
            await bot.delete_message(callback_query.from_user.id, sending_id)
            await bot.send_message(callback_query.from_user.id, 'üÜó')
            await state.set_state(TestStates.all()[1])
            await bot.send_message(callback_query.from_user.id,
                                   '–ü—Ä–∏—Å—ã–ª–∞–π —Å—Å—ã–ª–∫–∏ –Ω–∞ —É—Ä–æ–∫–∏ –∏ –∑–∞–¥–∞–Ω–∏—è (–æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ–¥–Ω–∞ —Å—Å—ã–ª–∫–∞):',
                                   reply_markup=stop_markup)
            thread_time = threading.Thread(target=asyncio.run, args=(time_end(callback_query.from_user.id),))
            thread_time.start()
            while users_data[callback_query.from_user.id].fck != 0:
                if users_data[callback_query.from_user.id].fck == -1:
                    break
                await asyncio.sleep(1)
            if users_data[callback_query.from_user.id].fck == 0:
                await bot.send_message(callback_query.from_user.id, '–±–±')

    @dp.callback_query_handler(lambda c: c.data == 'info_b')
    async def process_callback_info(callback_query: types.CallbackQuery):
        await callback_query.message.delete()
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(callback_query.from_user.id, '–ò–Ω—Ñ–æ—Ä–º–∞–∏—Ü–∏—è:')
        await bot.send_message(callback_query.from_user.id, '–í –¥—Ä—É–≥–æ–π –∂–∏–∑–Ω–∏!')

    @dp.pre_checkout_query_handler(lambda query: True)
    async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
        if not hasattr(pre_checkout_q.order_info, 'email'):
            return await bot.answer_pre_checkout_query(
                pre_checkout_q.id,
                ok=False,
                error_message='–Ω–µ –≤–≤–µ–¥–µ–Ω –ª–æ–≥–∏–Ω –Ø–Ω–¥–µ–∫—Å –ª–∏—Ü–µ—è')
        await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)

    @dp.callback_query_handler(lambda c: c.data == 'buy_b')
    async def process_callback_buy2(callback_query: types.CallbackQuery):
        await callback_query.message.delete()
        await bot.answer_callback_query(callback_query.id)
        if PAYMENTS_TOKEN.split(':')[1] == 'TEST':
            await bot.send_message(callback_query.from_user.id, "–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂!!!")
            await bot.send_message(callback_query.from_user.id,
                                   '–í –ø–æ–ª–µ "–î–æ—Å—Ç–∞–≤–∫–∞" –≤–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –≤–∞—à–µ–≥–æ –Ø–Ω–¥–µ–∫—Å –∞–∫–∫–∞—É–Ω—Ç–∞ —Å –ª–∏—Ü–µ–µ–º')

        await bot.send_invoice(callback_query.from_user.id,
                               title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞",
                               description="–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –±–æ—Ç–∞ –Ω–∞ 1 –º–µ—Å—è—Ü",
                               provider_token=PAYMENTS_TOKEN,
                               currency="rub",
                               photo_url="https://www.aroged.com/wp-content/uploads/2022/06/Telegram-has-a-premium"
                                         "-subscription.jpg",
                               photo_width=416,
                               photo_height=234,
                               photo_size=416,
                               need_email=True,
                               is_flexible=False,
                               prices=[PRICE],
                               start_parameter="one-month-subscription",
                               payload="test-invoice-payload")

