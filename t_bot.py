#! /usr/bin/env python
# -*- coding: utf-8 -*-
import config
import logging

from aiogram import Bot, Dispatcher, executor, types
from aiogram.types.message import ContentType
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton

import main5
from utils import TestStates
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
import sqlite3
from sqlite3 import Error
import sql


#await bot.delete_message(message.chat.id, message.reply_to_message.message_id)

#https://surik00.gitbooks.io/aiogram-lessons/content/chapter4.html
logging.basicConfig(level=logging.INFO)

BOT_TOKEN = '6064341811:AAFJlrN3bV8fHUuL0eO_VbZcKerBH2cH9Io'
PAYMENTS_TOKEN = '381764678:TEST:51884'

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

dp.middleware.setup(LoggingMiddleware())


PRICE = types.LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü", amount=1000 * 100)  # –≤ –∫–æ–ø–µ–π–∫–∞—Ö (—Ä—É–±)

button1 = InlineKeyboardButton('–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='buy_b')
button2 = InlineKeyboardButton('–†–µ—à–∏—Ç—å –∑–∞–¥–∞—á–∏', callback_data='solve_b')
button3 = InlineKeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', callback_data='info_b')

markup2 = InlineKeyboardMarkup().add(button1).add(button2).add(button3)


stop_b = InlineKeyboardButton('–ü—Ä–µ—Ä–≤–∞—Ç—å', callback_data='stop')
stop_markup = InlineKeyboardMarkup().add(stop_b)


class User:
    def __init__(self, login='', passwd=''):
        self.login = login
        self.passwd = passwd
        self.links = []

users_data = {}


@dp.callback_query_handler(lambda c: c.data == 'buy_b')
async def process_callback_buy2(callback_query: types.CallbackQuery):
    await callback_query.message.delete()
    await bot.answer_callback_query(callback_query.id)
    if PAYMENTS_TOKEN.split(':')[1] == 'TEST':
        await bot.send_message(callback_query.from_user.id, "–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂!!!")
        await bot.send_message(callback_query.from_user.id, '–í –ø–æ–ª–µ "–î–æ—Å—Ç–∞–≤–∫–∞" –≤–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –≤–∞—à–µ–≥–æ –Ø–Ω–¥–µ–∫—Å –∞–∫–∫–∞—É–Ω—Ç–∞ —Å –ª–∏—Ü–µ–µ–º')

    await bot.send_invoice(callback_query.from_user.id,
                           title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞",
                           description="–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –±–æ—Ç–∞ –Ω–∞ 1 –º–µ—Å—è—Ü",
                           provider_token=PAYMENTS_TOKEN,
                           currency="rub",
                           photo_url="https://www.aroged.com/wp-content/uploads/2022/06/Telegram-has-a-premium-subscription.jpg",
                           photo_width=416,
                           photo_height=234,
                           photo_size=416,
                           need_email=True,
                           is_flexible=False,
                           prices=[PRICE],
                           start_parameter="one-month-subscription",
                           payload="test-invoice-payload")


@dp.callback_query_handler(lambda c: c.data == 'stop', state=TestStates.all())
async def process_callback_solve(callback_query: types.CallbackQuery):
    state = dp.current_state(user=callback_query.from_user.id)
    await state.reset_state()
    await bot.send_message(callback_query.from_user.id, '–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ—Ä–≤–∞–Ω')


@dp.callback_query_handler(lambda c: c.data == 'solve_b')
async def process_callback_solve(callback_query: types.CallbackQuery):
    await callback_query.message.delete()
    state = dp.current_state(user=callback_query.from_user.id)
    await state.set_state(TestStates.all()[1])
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–ú–Ω–µ –Ω—É–∂–Ω—ã —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ. –û—Ç –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã —É–∂–µ –µ—Å—Ç—å. –ù—É–∂–Ω—ã –µ—â–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ—Ç —è–Ω–¥–µ–∫—Å –∞–∫–∫–∞—É–Ω—Ç–∞ —Å –ª–∏—Ü–µ–µ–º', reply_markup=stop_markup)
    await bot.send_message(callback_query.from_user.id, '–õ–æ–≥–∏–Ω:')



@dp.callback_query_handler(lambda c: c.data == 'info_b')
async def process_callback_info(callback_query: types.CallbackQuery):
    await callback_query.message.delete()
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–ò–Ω—Ñ–æ—Ä–º–∞–∏—Ü–∏—è:')
    await bot.send_message(callback_query.from_user.id, '–í –¥—Ä—É–≥–æ–π –∂–∏–∑–Ω–∏!')


@dp.message_handler(commands=['start', 'menu'])
async def send_welcome(message: types.Message):
    state = dp.current_state(user=message.from_user.id)
    await state.reset_state()
    await bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç!\n–Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –æ—Ç sanyasupertank –∏ popkapirat!\n–ï—Å–ª–∏ —É —Ç–µ–±—è –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏, —è —Å–¥–µ–ª–∞—é –≤—Å–µ –∑–∞ —Ç–µ–±—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.", reply_markup=markup2)


@dp.message_handler(commands=['info'])
async def send_welcome(message: types.Message):
    await bot.send_message(message.chat.id, '–º–Ω–µ –ø–æ–∫–∞ –ª–µ–Ω—å(((')


@dp.pre_checkout_query_handler(lambda query: True)
async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
    #print('order_info')
    #print(pre_checkout_q.order_info)
    if not hasattr(pre_checkout_q.order_info, 'email'):
        return await bot.answer_pre_checkout_query(
            pre_checkout_q.id,
            ok=False,
            error_message='–Ω–µ –≤–≤–µ–¥–µ–Ω –ª–æ–≥–∏–Ω –Ø–Ω–¥–µ–∫—Å –ª–∏—Ü–µ—è')
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)


@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: types.Message):
    #print("SUCCESSFUL PAYMENT:")
    payment_info = message.successful_payment.to_python()
    sqlite_connection = sql.sql_connection()
    sql.add_subscriber(sqlite_connection, payment_info['order_info']['email'])
    sqlite_connection.close()
    for k, v in payment_info.items():
        pass
        #print(f"{k} = {v}")

    #print(payment_info)
    #print(message.successful_payment)
    await bot.send_message(message.chat.id, f"–ü–ª–∞—Ç—ë–∂ –Ω–∞ —Å—É–º–º—É {message.successful_payment.total_amount // 100} {message.successful_payment.currency} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!!!")


@dp.message_handler()
async def zero_state_msg(msg: types.Message):
    if '–ø–∏–¥–æ—Ä' in msg.text.lower():
        await bot.send_message(msg.from_user.id, '–ë–æ–≥–∞ –ø–æ–±–æ–π—Å—è, —É—ë–±–æ–∫')

    elif '–∏–ª—å—è–ø–µ—Ç—É—Ö' in msg.text.lower():
        sqlite_connection = sql.sql_connection()
        sql.add_subscriber(sqlite_connection, msg.text.split()[1])
        sqlite_connection.close()
        await bot.send_message(msg.from_user.id, '–û–∫ –±—Ä–æ, —è —Ç–µ–±—è –ø–æ–Ω—è–ª')
    else:
        await bot.send_message(msg.from_user.id, '–ß—Ç–æ —Ç—ã –Ω–µ—Å–µ—à—å?')


@dp.message_handler(state=TestStates.TEST_STATE_1[0])
async def first_test_state_case_met(message: types.Message):
    users_data[message.from_user.id] = User()
    users_data[message.from_user.id].login = message.text
    print(users_data)

    sqlite_connection = sql.sql_connection()
    if not sql.check_existence(sqlite_connection, users_data[message.from_user.id].login):
        await message.delete()
        await bot.send_message(message.from_user.id, '‚ùå')
        state = dp.current_state(user=message.from_user.id)
        await state.reset_state()
        await message.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏((( —Å–æ—Ä–∏', reply=False)
    else:
        await message.delete()
        await bot.send_message(message.from_user.id, 'üÜó')
        state = dp.current_state(user=message.from_user.id)
        await state.set_state(TestStates.all()[2])
        await message.reply('–ü–∞—Ä–æ–ª—å:', reply=False)


@dp.message_handler(state=TestStates.TEST_STATE_2[0])
async def second_test_state_case_met(message: types.Message):
    users_data[message.from_user.id].passwd = message.text
    await message.delete()
    await bot.send_message(message.from_user.id, 'üÜó')
    state = dp.current_state(user=message.from_user.id)
    await state.set_state(TestStates.all()[3])
    await bot.send_message(message.from_user.id,
                           '–ü—Ä–∏—Å—ã–ª–∞–π —Å—Å—ã–ª–∫–∏ –Ω–∞ —É—Ä–æ–∫–∏ –∏ –∑–∞–¥–∞–Ω–∏—è (–æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ–¥–Ω–∞ —Å—Å—ã–ª–∫–∞):',
                           reply_markup=stop_markup)


@dp.message_handler(state=TestStates.TEST_STATE_3[0])
async def third_test_state_case_met(message: types.Message):

    if type(main5.check_url(users_data[message.from_user.id].links[-1])) == list:
        await message.reply('–ü–æ–≥–Ω–∞–ª–∏!', reply=False)

        if len(users_data[message.from_user.id].links) == 0:
            users_data[message.from_user.id].links.append(message.text)
            await main5.solve(message.from_user.id)
        else:
            users_data[message.from_user.id].links.append(message.text)

        #await message.reply(f'–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞', reply=False)
    else:
        await message.delete()
        await message.reply('–°—Å—ã–ª–∫–∞ –≥–æ–≤–Ω–æ!', reply=False)


async def shutdown(dispatcher: Dispatcher):
    await dispatcher.storage.close()
    await dispatcher.storage.wait_closed()


#1111 1111 1111 1026, 12/22, CVC 000.
# run long-polling
if __name__ == "__main__":
    executor.start_polling(dp, on_shutdown=shutdown)
